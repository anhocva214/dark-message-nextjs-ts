import _objectSpread from "@babel/runtime/helpers/objectSpread2";
import _objectWithoutProperties from "@babel/runtime/helpers/objectWithoutProperties";
import React, { forwardRef, useRef, useEffect, useImperativeHandle } from 'react';
import isEqual from 'lodash/isEqual';
import cloneDeep from 'lodash/cloneDeep';

const syncRef = (source, target) => {
  /* istanbul ignore else */
  if (typeof target === 'function') {
    target(source.current);
  } else if (target) {
    ;
    target.current = source.current;
  }
};

const BaseChart = (props, ref) => {
  const {
    chart: Chart,
    style,
    className,
    chartRef: chart
  } = props,
        restProps = _objectWithoutProperties(props, ["chart", "style", "className", "chartRef"]);

  const chartRef = useRef(null);
  const configRef = useRef();
  const containerRef = useRef(null);
  const isFirstRenderRef = useRef(true);
  const dataRef = useRef([]);
  useImperativeHandle(ref, () => containerRef.current);
  useEffect(() => {
    const {
      current: container
    } = containerRef;
    /* istanbul ignore else */

    if (container) {
      const _ref = restProps,
            {
        data
      } = _ref,
            config = _objectWithoutProperties(_ref, ["data"]);

      configRef.current = cloneDeep(config);
      const normalizedData = data || [];
      dataRef.current = normalizedData;

      const mergedConfig = _objectSpread(_objectSpread({}, config), {}, {
        data: normalizedData
      });

      chartRef.current = new Chart(container, mergedConfig);
      chartRef.current.render();
    }

    syncRef(chartRef, chart);
    return () => {
      /* istanbul ignore else */
      if (chartRef.current) {
        chartRef.current.destroy();
        chartRef.current = null;
        syncRef(chartRef, chart);
      }
    }; // eslint-disable-next-line
  }, []);
  useEffect(() => {
    const {
      current: chart
    } = chartRef;
    /* istanbul ignore else */

    if (chart) {
      // avoid update in first time
      if (!isFirstRenderRef.current) {
        const _ref2 = restProps,
              {
          data
        } = _ref2,
              config = _objectWithoutProperties(_ref2, ["data"]);

        const normalizedData = data || [];

        if (!isEqual(config, configRef.current) || !dataRef.current.length) {
          configRef.current = cloneDeep(config);

          const mergedConfig = _objectSpread(_objectSpread({}, config), {}, {
            data: normalizedData
          });

          chart.update(mergedConfig);
          chart.render();
        } else {
          chart.changeData(normalizedData);
        }

        dataRef.current = normalizedData;
      } else {
        isFirstRenderRef.current = false;
      }
    }
  }, [restProps]);
  return /*#__PURE__*/React.createElement("div", {
    style: style,
    className: className,
    ref: containerRef
  });
};

export default /*#__PURE__*/forwardRef(BaseChart);